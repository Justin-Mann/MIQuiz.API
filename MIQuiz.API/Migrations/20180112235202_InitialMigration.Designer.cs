// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MIQuizAPI.Database.Context;
using System;

namespace MIQuizAPI.Migrations
{
    [DbContext(typeof(MIQuizContext))]
    [Migration("20180112235202_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MIQuizAPI.Database.Models.AnswerDef", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnswerImageImageId");

                    b.Property<int?>("AnswerVideoVideoId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Text")
                        .HasMaxLength(250);

                    b.HasKey("AnswerId");

                    b.HasIndex("AnswerImageImageId");

                    b.HasIndex("AnswerVideoVideoId");

                    b.ToTable("AnswerTbl");
                });

            modelBuilder.Entity("MIQuizAPI.Database.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("ImageBLOB");

                    b.Property<string>("ImageURI");

                    b.Property<bool>("IsActive");

                    b.HasKey("ImageId");

                    b.ToTable("ImagesTbl");
                });

            modelBuilder.Entity("MIQuizAPI.Database.Models.JoinQuestionAnswer", b =>
                {
                    b.Property<int>("AnswerId");

                    b.Property<int>("QuestionId");

                    b.Property<int?>("AnswerOrder");

                    b.Property<bool>("IsCorrectAnswer");

                    b.HasKey("AnswerId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswerTbl");
                });

            modelBuilder.Entity("MIQuizAPI.Database.Models.JoinQuizQuestion", b =>
                {
                    b.Property<int>("QuizId");

                    b.Property<int>("QuestionId");

                    b.Property<int?>("QuestionOrder");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestionTbl");
                });

            modelBuilder.Entity("MIQuizAPI.Database.Models.QuestionDef", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<int?>("QuestionImageImageId");

                    b.Property<int?>("QuestionVideoVideoId");

                    b.Property<string>("Text")
                        .HasMaxLength(250);

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("QuestionId");

                    b.HasIndex("QuestionImageImageId");

                    b.HasIndex("QuestionVideoVideoId");

                    b.ToTable("QuestionTbl");
                });

            modelBuilder.Entity("MIQuizAPI.Database.Models.QuizDef", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("GradingCriteria")
                        .HasMaxLength(500);

                    b.Property<string>("Instructions")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("Order");

                    b.Property<int>("UserId");

                    b.HasKey("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizTbl");
                });

            modelBuilder.Entity("MIQuizAPI.Database.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .HasMaxLength(20);

                    b.Property<int>("Role");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("UserId");

                    b.ToTable("UsersTbl");
                });

            modelBuilder.Entity("MIQuizAPI.Database.Models.Video", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageURI");

                    b.Property<bool>("IsActive");

                    b.HasKey("VideoId");

                    b.ToTable("VideosTbl");
                });

            modelBuilder.Entity("MIQuizAPI.Database.Models.AnswerDef", b =>
                {
                    b.HasOne("MIQuizAPI.Database.Models.Image", "AnswerImage")
                        .WithMany()
                        .HasForeignKey("AnswerImageImageId");

                    b.HasOne("MIQuizAPI.Database.Models.Video", "AnswerVideo")
                        .WithMany()
                        .HasForeignKey("AnswerVideoVideoId");
                });

            modelBuilder.Entity("MIQuizAPI.Database.Models.JoinQuestionAnswer", b =>
                {
                    b.HasOne("MIQuizAPI.Database.Models.AnswerDef", "Answer")
                        .WithMany("Question")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MIQuizAPI.Database.Models.QuestionDef", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MIQuizAPI.Database.Models.JoinQuizQuestion", b =>
                {
                    b.HasOne("MIQuizAPI.Database.Models.QuestionDef", "Question")
                        .WithMany("Quizes")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MIQuizAPI.Database.Models.QuizDef", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MIQuizAPI.Database.Models.QuestionDef", b =>
                {
                    b.HasOne("MIQuizAPI.Database.Models.Image", "QuestionImage")
                        .WithMany()
                        .HasForeignKey("QuestionImageImageId");

                    b.HasOne("MIQuizAPI.Database.Models.Video", "QuestionVideo")
                        .WithMany()
                        .HasForeignKey("QuestionVideoVideoId");
                });

            modelBuilder.Entity("MIQuizAPI.Database.Models.QuizDef", b =>
                {
                    b.HasOne("MIQuizAPI.Database.Models.User")
                        .WithMany("CreatedQuizes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
